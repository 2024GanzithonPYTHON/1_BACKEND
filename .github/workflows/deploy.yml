name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Create application-aws.yml
        run: |
          echo "${{ secrets.AWS_CONFIGURATION }}" > ./src/main/resources/application-aws.yml
          ls ./src/main/resources
          cat ./src/main/resources/application-aws.yml
      - name: Build with Gradle
        run: ./gradlew build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: spring-boot-app
          path: build/libs/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-boot-app
          path: build/libs

      - name: Save SSH key
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$EC2_KEY" > ~/.ssh/private-key.pem
          chmod 600 ~/.ssh/private-key.pem  # pem 키에 적절한 권한 부여
          eval $(ssh-agent -s)

      - name: Add EC2 public key to known hosts
        run: |
          ssh-keygen -y -f ~/.ssh/private-key.pem >> ~/.ssh/known_hosts

      - name: List files
        run: |
          cd ${{ github.workspace }}
          pwd
          ls -la
          ls -la build/libs

      - name: Copy JAR file to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          # jar 파일 찾기
          jar_file=$(find build/libs -name "*.jar" ! -name "*plain.jar" -type f | head -n 1)
          
          # 파일 존재 확인
          if [ -z "$jar_file" ]; then
          echo "No JAR file found!"
          exit 1
          fi
          echo "Found JAR file: $jar_file"
    
          # 파일 복사
          scp -i ~/.ssh/private-key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USER@$EC2_HOST:~/app.jar


      - name: Deploy on EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          ssh -i ~/.ssh/private-key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
          docker stop springboot_app || true
          docker rm springboot_app || true
          docker run -d --name springboot_app \
          -p 8080:8080 \
          -v ~/app.jar:/app/app.jar \
          openjdk:17 java -jar /app/app.jar
          EOF
